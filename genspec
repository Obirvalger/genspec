#!/usr/bin/python3

# Script to generate RPM spec file based on template
# (c) 2014,2017 Andrey Cherepanov <cas@altlinux.org>
# (c) 2017 Mikhail Gordeev <obirvalger@altlinux.org>

# This program is free software; you can redistribute it and/or modify it
# under the terms of GNU General Public License (GPL) version 3 or later.
from string import Template
from functools import partial
import os
import sys
import datetime
import argparse
import subprocess
import re
import tempfile

templates_path = "/usr/share/spectemplates/"
null_call = partial(subprocess.call, stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL)
null_check_call = partial(subprocess.check_call, stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL)

# Get templates path and build list of available templates
t = os.getenv('GENSPEC_TEMPLATES')
if t != None:
        templates_path = t

# Get configured packager
p = subprocess.Popen(['rpm', '--eval', '%{packager}'], stdout=subprocess.PIPE)
out, err = p.communicate()
maintainer = out.rstrip().decode()

m = os.getenv('GENSPEC_PACKAGER')
if m is not None:
    maintainer = m

if maintainer == '%{packager}':
    print('No packager privided not by rpm nor by GENSPEC_PACKAGER')
    exit(1)

spec_prefixes = {  'python': 'python-module-',
                   'python2': 'python-module-',
                   'python3': 'python3-module-',
                   'ruby': 'ruby-',
                   'vim': 'vim-plugin-',
                }

class Spec:
    """RPM Spec class"""
    def __init__(self, tag='', use_git=False, date=None):
        """Constructor"""
        if date is None:
            self.date = datetime.datetime.now()
        else:
            self.date = date
        self.use_git = use_git

        self.tag = tag
        if not tag:
            self.build_place = '.'
        elif tag.startswith('v'):
            self.build_place = 'v@version@:.'
        else:
            self.build_place = '@version@:.'

        self.module  = ""
        self.package = ""
        self.keys = dict( spec_type = "",
                        module  = "",
                        version = "",
                        summary = "",
                        license = "",
                        url     = "",
                        packager    = "",
                        description = "",
                        stamp       = "",
                        lastchange  = "" )
        self.spec = ""

    def apply(self, spectype):
        """Apply values to spec template"""
        self.keys['packager'] = maintainer

        file = open( templates_path + spectype + ".spec", "r" )

        # Generate package name
        if spectype in spec_prefixes:
                self.package = spec_prefixes[ spectype ] + self.keys['module']
        else:
                self.package = self.keys['module']

        # Generate changelog entry
        self.keys['stamp'] = '* ' \
          + self.date.strftime("%a %b %d %Y") \
          + ' ' + self.keys['packager'] \
          + ' ' + self.keys['version']

        # Fill template
        self.spec = file.read()
        file.close()
        self.spec = Template( self.spec ).safe_substitute( self.keys )

    def deploy(self):
        """Generate directory with spec and gear rules"""
        self.apply( self.keys['spec_type'] )

        # Create directory
        if os.path.basename(os.getcwd()) != self.package:
            if self.use_git:
                self.__gitClone()
            else:
                os.mkdir( self.package )
                os.chdir( self.package )

        # Create gear rules
        os.mkdir( '.gear' )

        if self.package != self.keys['module']:
                gear_rules = "tar: {0} name={1}-@version@ base={1}-@version@\n".format(self.build_place, self.keys['module'])
        else:
                gear_rules = "tar: {}\n".format(self.build_place)
        f = open( '.gear/rules', 'w' )
        f.write( gear_rules )
        f.close()

        # Save spec file
        f = open( self.package + '.spec', 'w' )
        f.write( self.spec )
        f.close()

        if self.use_git:
            self.__gearPost()

    def test(self, original):
        with tempfile.TemporaryDirectory() as tmpdir:
            olddir = os.getcwd()
            os.chdir(tmpdir)
            self.deploy()
            os.chdir(olddir)
            exit_status = null_call(['diff', '-rq', '-x', '.git', os.path.join(tmpdir, self.package), original])
            if exit_status:
                subprocess.check_call(['diff', '-r', os.path.join(tmpdir, self.package), original])

    def __gitClone(self):
        null_check_call(["git", "clone", "-o", "upstream", self.keys['url'], self.package])
        os.chdir( self.package )
        if self.tag:
            null_check_call("git reset --hard " + self.tag, shell=True)
        else:
            null_check_call("git reset --hard `git describe --abbrev=0 --tags`", shell=True)
        null_check_call(["git", "checkout", "-b", "sisyphus"])
        null_check_call(["git", "rm", "-rfq", "*"])
        null_check_call(["git", "commit", "-m", "Create empty branch"])

    def __gearPost(self):
        null_check_call(["gear-update-tag", "-a"])
        null_check_call("gear-remotes-save")
        null_check_call(["git", "add", "."])

# Read command-line parameters
parser = argparse.ArgumentParser(
    description='Script to generate RPM spec file based on template',
    formatter_class=argparse.RawDescriptionHelpFormatter,
    epilog=
"""
Supported environment variables:
GENSPEC_TEMPLATES       Path to spec templates (default /usr/share/spectemplates/)
GENSPEC_PACKAGER        Packager name (default from `rpm --eval '%{packager}'`)
""")

parser.add_argument('--version', action='version', version="1.2.8")
parser.add_argument('-n', action='store', dest='module', help='Package or module name')
parser.add_argument('-t', action='store', dest='spec_type', help='Package type')
parser.add_argument('-v', action='store', dest='version', help='Package version')
parser.add_argument('-s', action='store', dest='summary', help='Package summary')
parser.add_argument('-l', action='store', dest='license', help='Package license')
parser.add_argument('-u', action='store', dest='url', help='Package URL')
parser.add_argument('-d', action='store', dest='description', help='Package description')
parser.add_argument('-c', action='store', dest='lastchange', help='Package changelog')
parser.add_argument('--tag', action='store', help='Git tag (uses in .gear/rules)')
parser.add_argument('--git', action='store_true', help='Git clone from url, clear repo and configure remotes update')
parser.add_argument('--test', action='store', dest='original', help='Run in test mode to compare result with original dir')
parser.add_argument('--date', type=lambda d: datetime.datetime.strptime(d, '%Y-%m-%d'), help='Pass date to changelog in format YYYY-MM-DD')

# Fill values...
args = parser.parse_args()
# print(args.git)
# print(args.tag)
# print(args.original)
# exit()

# ======================================================================================================
spec = Spec(args.tag, args.git, args.date)

def get_available_types():
    available_types = []
    try:
        file_names = os.listdir(templates_path)
        available_types = [x.replace('.spec','') for x in file_names if x.endswith('.spec')]
    except:
        print('Directory ' + templates_path + ' does not exist or does not contain any spec templates')

    return (' (' + ','.join(list(sorted(list(available_types)))) + ')')


def input_with_check(prompt):
    res = input(prompt)
    # skip empty string and string containing only white spaces
    while (re.match('^\s*$', res)):
        print("Parameter should not be empty")
        res = input(prompt)
    return res

read_dict = {}

if len(sys.argv) < 2:
    # Go to interactive mode
    read_dict['module']      = input_with_check('Package or module name: ')
    read_dict['spec_type']   = input_with_check('Package type' + get_available_types() + ': ')
    read_dict['version']     = input_with_check('Package version: ')
    read_dict['summary']     = input_with_check('Package summary: ')
    read_dict['license']     = input_with_check('Package license: ')
    read_dict['url']         = input_with_check('Package URL: ')
    read_dict['description'] = input_with_check('Package description: ')
    read_dict['lastchange']  = input_with_check('Package changelog: ')

    spec.keys = read_dict
else:
    spec.keys = args.__dict__

# Prepare place
if args.original is None:
    spec.deploy()
else:
    spec.test(args.original)
